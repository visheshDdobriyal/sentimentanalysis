import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
#Twitter API credentials
accessToken='1388735897009414144-gtssMhz2nJ9VCAbea8Euz3uYwu4sy3'
accessTokenSecret='PYr2mOT3mTUMfbZvmTcVQOuaDqBvGKgqtgyki41Wy6MsJ'
consumerKey='91S1XCZn8XT5Wb75vAzKozTpq'
consumerSecretKey='yRKHvTZPe8DIbm9JqRvKpbGVBMcqFCHh7dSpxE5LluH0ahbiyV'
# Create the authentication object
authenticate = tweepy.OAuthHandler(consumerKey, consumerSecretKey)
#Create the API object while passing in the auth information
api = tweepy.API(authenticate, wait_on_rate_limit= True)
#Extracting the tweets from the user
searchTerm = input("Enter Keyword/Tag to search about: ")
NoOfTerms = int(input("Enter how many tweets to search: "))
posts = api.user_timeline(screen_name = searchTerm, count = NoOfTerms, lang = "en", tweet_mode="extended")

# Print the last  Tweets from the account
print("show the recent tweets: \n")
i=0
for tweet in posts[0:100]:
  i=i+1
  print(i)

  print( tweet.full_text + '\n')
#Create a dataframe with a column called tweets
df = pd.DataFrame([tweet.full_text for tweet in posts], columns=['Tweets'])

#Show the first 5 rows of data
df.head()

def cleanTxt(text):
  text = re.sub(r'@[A-Za-z0-9]+','',text) #Removed @
  text = re.sub(r'#','',text) #Removing #
  text = re.sub(r'RT[\s]+','',text) #Removing RT
  text = re.sub(r'https?:\/\/[A-Za-z0-9\.\/]+','',text) #Remove the hyperlink

  return text


df['Tweets']= df['Tweets'].apply(cleanTxt)


df
# Create a function to get the subjectivity
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

# Create a function to get the polarity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity

# Create two new columns
df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['polarity'] = df['Tweets'].apply(getPolarity)

# Show the new dataframe with the new columns
df
# Plot the word cloud
allWords = ' '.join( [twts for twts in df['Tweets']] )
wordCloud = WordCloud(width = 500, height = 300, random_state = 21, max_font_size = 119).generate(allWords)

plt.imshow(wordCloud, interpolation = "bilinear")
plt.axis('off')
plt.show()
#Create a function to compute the negative, neutral and positive analysis
def getAnalysis(score):
  if score<0:
    return 'Negative'
  elif score ==0:
    return 'Neutral'
  else:
    return 'Positive'

df['Analysis'] = df['polarity'].apply(getAnalysis)

#Show the dataframe
df

#Print all the positive tweets
j=1
sortedDF = df.sort_values(by=['polarity'])
for i in range(0, sortedDF.shape[0]):
  if(sortedDF['Analysis'][i]=='Positive'):
    print(str(j) + ') ' + sortedDF['Tweets'][i])
    print()
    j=j+1
#Print the negative tweets
j=1
sortedDF = df.sort_values(by=['polarity'], ascending ='False')
for i in range(0, sortedDF.shape[0]):
  if( sortedDF['Analysis'][i]=='Negative'):
    print(str(j)+ ') '+ sortedDF['Tweets'][i])
    print()
    j=j+1
#Plot the polarity and subjectivity
plt.figure(figsize=(8,6))
for i in range (0, df.shape[0]):
  plt.scatter(df['polarity'][i],df['Subjectivity'][i], color='Red')

plt.title('Sentiment Analysis')
plt.xlabel('polarity')
plt.ylabel('Subjectivity')
plt.show()
#Get the percentage of positive tweets
ptweets = df[df.Analysis == 'Positive']
ptweets = ptweets['Tweets']

round( (ptweets.shape[0] / df.shape[0]) *100 , 1)
#Get the percentage of negative tweets
ntweets = df[df.Analysis == 'Negative']
ntweets = ntweets['Tweets']
round( (ntweets.shape[0]/df.shape[0]*100), 1)
#Show the value counts
df['Analysis'].value_counts()

#Plot and visualize the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Count')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()
